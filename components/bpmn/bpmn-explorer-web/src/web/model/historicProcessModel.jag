<!--
 ~ Copyright (c) WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ Licensed under the Apache License, Version 2.0 (the "License");
 ~ you may not use this file except in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~      http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing, software
 ~ distributed under the License is distributed on an "AS IS" BASIS,
 ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~ See the License for the specific language governing permissions and
 ~ limitations under the License.
-->
<%
var wsRequest = require ('/assets/wsRequest.js');
wsRequest.initHTServerInfo(httpServiceUrl, session.get('BPSSessionCookie'));

var pagination = request.getParameter("pagination");
if (pagination == null || pagination == ""){
    pagination = 1;
}
var start = 0;
if(pagination > 0){
    start = (pagination - 1)*10 ;
}
var headers = {"Authorization":"Basic " + auth};


var processDefinitions = get( httpUrl +"/bpmn/repository/process-definitions?tenantId="+ bpsTenantID+"&start=" + start + "&size=10", null, headers, "json" ).data;


var paginatePageCount = Math.ceil(processDefinitions.total / 10);

var list = [];
var runtimeInstanceList = [];
var completedInstanceList  = [];

for(var j = 0; j < processDefinitions.data.length; j++) {
    var pId = processDefinitions.data[j].id;
    var runtimeInstanceList = [];
    var completedInstanceList  = [];

    var runtimeInstances = get( httpUrl +"/bpmn/runtime/process-instances?processDefinitionId=" +pId ,null, headers, "json" ).data;

    for(var i = 0; i < runtimeInstances.data.length; i++) {
        var runtimeInstanceId = runtimeInstances.data[i].id;
        runtimeInstanceList.push(runtimeInstanceId);
    }

    var completedInstances = get( httpUrl +"/bpmn/history/historic-process-instances?finished=true&processDefinitionId=" +pId ,null, headers, "json" ).data;

    for(var k = 0; k < completedInstances.data.length; k++) {
        var completedInstanceId = completedInstances.data[k].id;
        completedInstanceList.push(completedInstanceId);
    }

    //Get the bpmn diagram
    var resource = get( httpUrl + "/bpmn/stats/processTaskServices/resourceDiagram/"+pId, null, headers, "json" ).data.data;


    var imageUrl = "";
    if (resource == null) {
        imageUrl = "not supported";
    } else {
        var BPSResponseXML = new XML(wsRequest.getBPMNProcessDiagram(pId));

        if(BPSResponseXML == null || BPSResponseXML == ""){
            if (log.isDebugEnabled()) {
                log.debug('Session timed out for request' + wsRequest);
            }
            session.put('authSuccess', false);
            response.sendRedirect('login');
            throw "HTTPS Session with BPS has timed out";
        } else {

            var imageData = BPSResponseXML.toString().split(":return")[1];
            imageUrl = "data:image/png;base64,"+ imageData.substring(1, imageData.length - 4);

        }
    }


    var instanceList = {
        deployment: pId,
        running: runtimeInstanceList,
        completed: completedInstanceList,
        imageUrl: imageUrl
    };

    list.push(instanceList);

}


//Set current active veiw as process view. 
//This is used to highlight current view which the user currently viewing in the navigation bar
historicProcessNavActive = 'class="active"';
%>

<!--
 ~ Copyright (c) WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ Licensed under the Apache License, Version 2.0 (the "License");
 ~ you may not use this file except in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~      http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing, software
 ~ distributed under the License is distributed on an "AS IS" BASIS,
 ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~ See the License for the specific language governing permissions and
 ~ limitations under the License.
-->
<%
var wsRequest = require ('/assets/wsRequest.js');
wsRequest.initHTServerInfo(httpUrl, session.get('BPSSessionCookie'));

var pagination = request.getParameter("pagination");
if (pagination == null || pagination == ""){
	pagination = 1;
}
var start = 0;
if(pagination > 0){
	start = (pagination - 1)*10 ;
}
var headers = {"Authorization":"Basic " + auth};

/* REMOVE REPEATING REST CALLS NOT NEED TO CALL FIRST CALL SINCE TOTAL PROCESS COUNT IS IN THE RESPONSE
var processCount = get( httpUrl + "/bpmn/repository/process-definitions" ,null, headers, "json" ).data.total;
var paginatePageCount = Math.ceil(processCount / 10);

if (log.isDebugEnabled()) {
    log.debug("BPS BPMN REST request:"+ httpUrl + "/bpmn/repository/process-definitions");
    log.debug("BPS BPMN REST API response: " +stringify(processCount));
}

var paginatePageCount = Math.ceil(processCount.total / 10);
*/
try {
    var list = [];

    var processes = get( httpUrl + "/bpmn/repository/process-definitions?sort=name&start=" + start + "&size=10&order=asc"
        ,null, headers, "json" ).data;

    if (log.isDebugEnabled()) {
        log.debug("BPS BPMN REST request:"+ httpUrl + "/bpmn/repository/process-definitions?sort=name&start=" + start + "&size=10&order=asc");
        log.debug("BPS BPMN REST API response: " +stringify(processes));
    }
    //Check for error response
    if (processes.errorMessage != undefined) {
        throw "Error " + processes.statusCode + " : " + processes.errorMessage;
    }

    var paginatePageCount = Math.ceil(processes.total / 10);

    for (var j=0; j<processes.data.length; j++) {
        if(processes.data[j].diagramResource == null){
            imageUrl = "not supported";
        }else{
            var BPSResponseXML = new XML(wsRequest.getBPMNProcessDiagram(processes.data[j].id));
            if(BPSResponseXML == null || BPSResponseXML == ""){
               if (log.isDebugEnabled()) {
                   log.debug('Session timed out for request' + wsRequest);
               }
               session.put('authSuccess', false);
               response.sendRedirect('login');
            }
            if (log.isDebugEnabled()) {
                log.debug('BPS RESPONSE : ' + BPSResponseXML);
            }
            var imageData = BPSResponseXML.toString().split(":return")[1];
            var imageUrl = "data:image/png;base64," + imageData.substring(1, imageData.length - 4);
        }
        var depId = processes.data[j].deploymentId;
        var deployment = get( httpUrl + "/bpmn/repository/deployments/" + depId ,null, headers, "json" ).data;

        if (log.isDebugEnabled()) {
            log.debug("BPS BPMN REST request:"+ httpUrl + "/bpmn/repository/deployments/" + depId);
            log.debug("BPS BPMN REST API response: " +stringify(processes));
        }
        //Check for error response
        if (deployment.errorMessage != undefined) {
            throw "Error " + deployment.statusCode + " : " + deployment.errorMessage;
        }

        var packageName = deployment.name + "-" + depId;

        list.push({
            processName: processes.data[j].name,
            processId: processes.data[j].id,
            packageName: packageName,
            version: processes.data[j].version,
            imageUrl: imageUrl
        });
    }
} catch (e) {
    if (log.isDebugEnabled()) {
        log.debug("User Error Occured : " + e);
    }
    //Enable and display error in common error display area in view
    commonErrorMessage = getCommonErrorContent(e);
    errorDisplayEnable = '';
}
//Set current active veiw as process view. 
//This is used to highlight current view which the user currently viewing in the navigation bar
processesNavActive = 'class="active"';
%>

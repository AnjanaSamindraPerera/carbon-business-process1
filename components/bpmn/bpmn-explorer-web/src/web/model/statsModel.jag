<%/*<!--
 ~ Copyright (c) WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ Licensed under the Apache License, Version 2.0 (the "License");
 ~ you may not use this file except in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~      http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing, software
 ~ distributed under the License is distributed on an "AS IS" BASIS,
 ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~ See the License for the specific language governing permissions and
 ~ limitations under the License.
-->*/%>
<%

var headers = {"Authorization":"Basic " + auth};
var start = 0;
var completedProcesses = get( httpUrl + "/bpmn/history/historic-process-instances?finished=true" ,null, headers, "json" ).data.total;
var activeProcesses = get( httpUrl + "/bpmn/runtime/process-instances?suspended=false" ,null, headers, "json" ).data.total;
var suspendProcesses = get( httpUrl + "/bpmn/runtime/process-instances?suspended=true" ,null, headers, "json" ).data.total;
//No state called failed
var failedProcesses = 0; //get( httpUrl + "/bpmn/runtime/process-instances" ,null, headers, "json" ).data.total 
						//- get( httpUrl + "/bpmn/runtime/process-instances" ,null, headers, "json" ).data.total;

var completedTasks = get( httpUrl + "/bpmn/history/historic-task-instances?finished=true" ,null, headers, "json" ).data.total;
var activeTasks = get( httpUrl + "/bpmn/runtime/tasks?active=true" ,null, headers, "json" ).data.total;
var suspendTasks = get( httpUrl + "/bpmn/runtime/tasks?active=false" ,null, headers, "json" ).data.total;
//No state called failed 
var failedTasks = 0; //get( httpUrl + "/bpmn/history/historic-task-instances" ,null, headers, "json" ).data.total 
						//- get( httpUrl + "/bpmn/runtime/tasks" ,null, headers, "json" ).data.total;

var processNames = get( httpUrl + "/bpmn/repository/process-definitions?size=0" ,null, headers, "json" ).data;
var processBarChart = [];
for(var i= 0; i < processNames.data.length; i++){
	var name = processNames.data[i].id;
	var processCount = get( httpUrl + "/bpmn/history/historic-process-instances?processDefinitionId=" + name ,null, headers, "json" ).data.total;
	processBarChart.push([
		name, processCount
	]);
}

var listProcess = get( httpUrl + "/bpmn/history/historic-process-instances?finished=true&size=0" ,null, headers, "json" );
var distListProcess = get( httpUrl + "/bpmn/repository/process-definitions?finished=true&size=0" ,null, headers, "json" );

var processBarChartAvgTime = [];
var taskArray = {};

for (var i in listProcess.data.data){
   var totalTime = 0;
   var processName = listProcess.data.data[i].processDefinitionId;
   var count = get( httpUrl + "/bpmn/history/historic-process-instances?finished=true&processDefinitionId=" + processName ,null, headers, "json" ).data.total;
  
   var timeduration = get( httpUrl + "/bpmn/history/historic-process-instances?finished=true&processDefinitionId=" + processName ,null, headers, "json" );

      for(var i in timeduration.data.data){
        var timeForOne = timeduration.data.data[i].durationInMillis;
        var timeInMinutes = ((timeForOne /(1000*60))%60);
        totalTime = totalTime + timeInMinutes;
      }

   var averageTime = totalTime / count;
   var avgRoundedTime = Math.round(averageTime * 1000) / 1000;

    if(checkForDuplicates(processBarChartAvgTime,processName) == 1){

    }else{

     	processBarChartAvgTime.push([
  		processName, avgRoundedTime
     ]);
    }
 }

  function checkForDuplicates(processBarChartAvgTime,processName){
     var counter = 0;
     for (var i = 0; i < processBarChartAvgTime.length; i++) {

          if (processName == processBarChartAvgTime[i][0]) {
              counter++;
          }
      }

      if(counter > 0){
          return 1;
      }else {
          return 0;
      }
  }

 var sortedAscendingArray = [];
 var sortedDescendingArray = [];
   

 var update = request.getParameter("update");
  if(update != null && update === "true"){
    if(option === "avgprocessduration"){

    var selectedProcess = request.getParameter("id");
    if(selectedProcess == "shortTime") {
      sortAscending(processBarChartAvgTime);
      sortedAscendingArray = processBarChartAvgTime.slice(0,10);
      processBarChartAvgTime = sortedAscendingArray;
    }else if(selectedProcess =="longTime"){
      sortDescending(processBarChartAvgTime);
      sortedDescendingArray = processBarChartAvgTime.slice(0,10);
      processBarChartAvgTime = sortedDescendingArray;
    }
  }
}

  var avgTimeDataPerProcess = {};
  for (var j in distListProcess.data.data){

    var processName = distListProcess.data.data[j].id;
    var taskList = get( httpUrl + "/bpmn/history/historic-task-instances?finished=true&size=0&processDefinitionId=" + processName ,null, headers, "json" );

    var insCount = get( httpUrl + "/bpmn/history/historic-process-instances?finished=true&processDefinitionId=" + processName ,null, headers, "json" ).data.total;
  
    taskArray = {};
    var keyList = [];
    var taskInstanceCountArray = [];

  for(var i in taskList.data.data){
    
       var taskName = taskList.data.data[i].name;
       var taskDuration = taskList.data.data[i].durationInMillis;
       var taskKey = taskList.data.data[i].taskDefinitionKey;

       if(taskArray[taskKey] > 0) {
            taskArray[taskKey] = taskArray[taskKey] + taskDuration;
            taskInstanceCountArray[taskKey] = taskInstanceCountArray[taskKey] + 1;  
       }
       else{
         taskArray[taskKey] = taskDuration;
         taskInstanceCountArray[taskKey] = 1;
         keyList.push([taskKey]);

       }
  }
  
    for(var i in keyList){
    taskArray[keyList[i]] = taskArray[keyList[i]] / taskInstanceCountArray[keyList[i]];
    } 

    if(insCount > 0){
        avgTimeDataPerProcess[processName] = taskArray;
      }
    }

    for (key in avgTimeDataPerProcess){
      if(JSON.stringify(avgTimeDataPerProcess[key]) === '{}'){
        delete avgTimeDataPerProcess[key];
      }
     
    }

    var update = request.getParameter("update");
    if(update != null && update === "true"){
      if(option === "taskduration"){
       var resultArray = [];
       var x = request.getParameter("id");
      
        for (subkey in avgTimeDataPerProcess[x]){
        resultArray.push([subkey, avgTimeDataPerProcess[x][subkey]]);
        }
      }
    }

  function sortAscending(processBarChartAvgTime) {
    var length = processBarChartAvgTime.length;
    for(var i = 1; i < length; ++i) {
      var temp = processBarChartAvgTime[i][1];
      var tempName = processBarChartAvgTime[i][0];
      var j = i - 1;
      for(; j >= 0 && processBarChartAvgTime[j][1] > temp; --j) {
        processBarChartAvgTime[j+1][1] = processBarChartAvgTime[j][1];
        processBarChartAvgTime[j+1][0] = processBarChartAvgTime[j][0];
      }
      processBarChartAvgTime[j+1][1] = temp;
      processBarChartAvgTime[j+1][0] = tempName;
    }
  }

  function sortDescending(processBarChartAvgTime) {
    var length = processBarChartAvgTime.length;
    for(var i = 1; i < length; ++i) {
      var temp = processBarChartAvgTime[i][1];
      var tempName = processBarChartAvgTime[i][0];
      var j = i - 1;
      for(; j >= 0 && processBarChartAvgTime[j][1] < temp; --j) {
        processBarChartAvgTime[j+1][1] = processBarChartAvgTime[j][1];
      }
      processBarChartAvgTime[j+1][1] = temp;
      processBarChartAvgTime[j+1][0] = tempName;
    }
  }
//User Monitoring
var users = [];
var taskInstancesList = get( httpUrl + "/bpmn/history/historic-task-instances?finished=true&size=0" ,null, headers, "json" );

  for(var i in taskInstancesList.data.data){
    var assName = taskInstancesList.data.data[i].assignee;
    users.push(assName);
  }
 
var uniqueUser = {};
users.forEach(function(x) { 
  uniqueUser[x] = (uniqueUser[x] || 0)+1; 
  });

var userVsTaskCount = [];
  for (key in uniqueUser){
    userVsTaskCount.push([key , uniqueUser[key]]);
  }


var userWithTaskTime = {};
var keyListForUsers = [];
var userCountArray = [];
var  userResultArray = [];
var average = [];
  for(var i in taskInstancesList.data.data){
    var assName = taskInstancesList.data.data[i].assignee;     
    var taskDuration = ((taskInstancesList.data.data[i].durationInMillis) / 1000) %60;
   
       if(userWithTaskTime[assName] > 0) {
            userWithTaskTime[assName] = userWithTaskTime[assName] + taskDuration;
            userCountArray[assName] = userCountArray[assName] + 1;  
       }
       else{
            userWithTaskTime[assName] = taskDuration;
            userCountArray[assName] = 1;
            keyListForUsers.push([assName]);

       }
    }
  
    for(var i in keyListForUsers){
      userWithTaskTime[keyListForUsers[i]] = userWithTaskTime[keyListForUsers[i]] / userCountArray[keyListForUsers[i]];
    } 

   average[assName] = userWithTaskTime;

    for (key in average){
        for (subkey in average[key]){
          userResultArray.push([subkey,average[key][subkey]]);
        }
    } 


var MONTHS = ["Jan","Feb","March", "April", "May" , "June", "July" ,"Aug" , "Sep" , "Oct" , "Nov" , "Dec"];

//Task Demand Variation Over Time
var completedTaskList = get( httpUrl + "/bpmn/history/historic-task-instances?finished=true&size=0" ,null, headers, "json" );
var finishedDate = [];

  for(var i in completedTaskList.data.data){
    var taskDurationForCompleted = completedTaskList.data.data[i].endTime;
    var month = taskDurationForCompleted.substring(5,7);
    finishedDate.push(month - 1);
  }
finishedDate.sort();
var uniqueMonthsForCompleted = {};
finishedDate.forEach(function(x) { 
  uniqueMonthsForCompleted[x] = (uniqueMonthsForCompleted[x] || 0)+1; 
  });

var startedTaskList = get( httpUrl + "/bpmn/history/historic-task-instances?started=true&size=0" ,null, headers, "json" );
var startedDate = [];
  for(var i in startedTaskList.data.data){
    var taskDurationForStarted = startedTaskList.data.data[i].startTime;
    var monthForStarted = taskDurationForStarted.substring(5,7);
    startedDate.push(monthForStarted - 1);
  }

startedDate.sort();

var uniqueMonthsForStarted = {};
startedDate.forEach(function(x) { 
  uniqueMonthsForStarted[x] = (uniqueMonthsForStarted[x] || 0)+1; 
  });

var arrayOfTaskCount = [];
  for(var i = 0;i < MONTHS.length;i++){
    if(uniqueMonthsForCompleted[i] == null && uniqueMonthsForStarted[i] == null){
      arrayOfTaskCount.push([MONTHS[i],0,0]);
    }else{
      arrayOfTaskCount.push([MONTHS[i],uniqueMonthsForCompleted[i],uniqueMonthsForStarted[i]]);
    }
  }

//Process Demand Variation Over Time

var processFinishedDate = [];
  for(var i in listProcess.data.data){
    var endTimeForProcess = listProcess.data.data[i].endTime;
    var monthForFinishedProcess = endTimeForProcess.substring(5,7);
    processFinishedDate.push(monthForFinishedProcess-1);
  }
processFinishedDate.sort();

var uniqueMonthForCompletedProcess = {};
processFinishedDate.forEach(function(x) { 
  uniqueMonthForCompletedProcess[x] = (uniqueMonthForCompletedProcess[x] || 0)+1; 
  });

var processStartedDate = [];
var startedProcessList = get( httpUrl + "/bpmn/history/historic-process-instances?started=true&size=0" ,null, headers, "json" );
  for(var i in startedProcessList.data.data){
    var startTimeForProcess = startedProcessList.data.data[i].startTime;
    var monthForStartedProcess = startTimeForProcess.substring(5,7);
    processStartedDate.push(monthForStartedProcess-1);
  }

processStartedDate.sort();

var uniqueMonthForStartedProcess = {};
processStartedDate.forEach(function(x) { 
  uniqueMonthForStartedProcess[x] = (uniqueMonthForStartedProcess[x] || 0)+1; 
  });


var arrayOfProcessCount = [];
  for(var i = 0;i < MONTHS.length;i++){
    if(uniqueMonthForCompletedProcess[i] == null && uniqueMonthForStartedProcess[i] == null){
    arrayOfProcessCount.push([MONTHS[i],0,0]);
    }else{
    arrayOfProcessCount.push([MONTHS[i],uniqueMonthForCompletedProcess[i],uniqueMonthForStartedProcess[i]]);
    }
  }

//Populate Users to Combo Box

  function eliminateDuplicates(arr) {
    var i,
        len = arr.length,
        out = [],
        obj = {};
   
    for (i = 0;i < len;i++) {
      obj[arr[i]] = 0;
    }
    for (i in obj) {
      out.push(i);
    }
    return out;
  }

var userArray = eliminateDuplicates(users);
userArray.sort();

//User Performance of Tasks over time

  var update = request.getParameter("update");
  if(update != null && update === "true"){
    if(option === "userperformance"){

    var selectedUser = request.getParameter("id");
    var userTaskCompletedArray = [];
    var finishedTaskDate = get( httpUrl + "/bpmn/history/historic-task-instances?finished=true&size=0&taskAssignee=" +selectedUser  ,null, headers, "json" );
     
      for(var i in finishedTaskDate.data.data){
        var finishForUser = finishedTaskDate.data.data[i].endTime;
        var monthForUser = finishForUser.substring(5,7);
        userTaskCompletedArray.push(monthForUser-1);
      }

    userTaskCompletedArray.sort();
    var uniqueUserMonthForFinishedTask = {};
    userTaskCompletedArray.forEach(function(x) { 
      uniqueUserMonthForFinishedTask[x] = (uniqueUserMonthForFinishedTask[x] || 0)+1; 
    });

    //Task instances started

    var userTaskStartedArray = [];
    var startedTaskDate = get( httpUrl + "/bpmn/history/historic-task-instances?started=true&size=0&taskAssignee=" +selectedUser  ,null, headers, "json" );
      
      for(var i in startedTaskDate.data.data){
        var startedForUser = startedTaskDate.data.data[i].startTime;
        var monthStartedForUser = startedForUser.substring(5,7);
        userTaskStartedArray.push(monthStartedForUser-1);
      }

    userTaskStartedArray.sort();
    var uniqueUserMonthForStartedTask = {};
    userTaskStartedArray.forEach(function(x) { 
      uniqueUserMonthForStartedTask[x] = (uniqueUserMonthForStartedTask[x] || 0)+1; 
    });

    var arrayOfTaskCountPerUser = [];
      for(var i = 0;i < MONTHS.length;i++){
        if(uniqueUserMonthForFinishedTask[i] == null && uniqueUserMonthForStartedTask[i] == null){
          arrayOfTaskCountPerUser.push([MONTHS[i],0,0]);
          
        }else{
            arrayOfTaskCountPerUser.push([MONTHS[i],uniqueUserMonthForFinishedTask[i],uniqueUserMonthForStartedTask[i]]);
        }
      }
    }
  }
%>
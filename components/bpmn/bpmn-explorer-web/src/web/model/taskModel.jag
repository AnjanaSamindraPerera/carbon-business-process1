<!--
 ~ Copyright (c) WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~ Licensed under the Apache License, Version 2.0 (the "License");
 ~ you may not use this file except in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~      http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing, software
 ~ distributed under the License is distributed on an "AS IS" BASIS,
 ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ~ See the License for the specific language governing permissions and
 ~ limitations under the License.
-->
<%
var id = request.getParameter("id");
var log = new Log();
var start = 0;
var MAX_SIZE = 10; //Max count of data per page

var headers = {"Authorization": "Basic " + auth};
var task = get(httpUrl + "/bpmn/task/" + id, null, headers, "json").data;
//for attachments table
var pagination = request.getParameter("pagination");
if (pagination == null || pagination == "") {
    pagination = 1;
}
if (pagination > 0) {
    start = (pagination - 1) * 10;
}

var attachments = get(httpUrl + "/bpmn/runtime/tasks/" + id + "/attachments", null, headers, "json").data;
var attachmentList = [];
if (attachments) {
    // if total data count reaches maxLimit and is not the first page
    if (attachments.length > MAX_SIZE && start > 9) {
        attachments.splice(0, start);

    }
    //first page and total count reaches limit
    else if (attachments.length > MAX_SIZE && start == 0) {
        var newLimit = attachments.length - MAX_SIZE;
        attachments.splice(10, newLimit);
    }
    for (var i = 0; i < attachments.length; i++) {
        var attachmentId = JSON.parse(attachments[i].id);
        var attachmentName = attachments[i].name;
        var attachmentType = attachments[i].type;
        var contentUrl = attachments[i].contentUrl;

        //
        attachmentList.push({
            id: attachmentId,
            name: attachmentName,
            type: attachmentType,
            url: contentUrl
        });

    }

    var attachmentCount = attachmentList.length;
    var paginatePageCount = parseInt((attachmentCount / 10));

}
else {
    if (isDebugEnabled()) {
        log.debug("No attachments found for task" + id);
    }
}

var taskDesc = task.description;
if (taskDesc == null) {
    taskDesc = "Description not available";
}
var taskOwner = task.owner;
if (taskOwner == null) {
    taskOwner = "Not available";
}
var taskName = task.name;
if (taskName == null) {
    taskName = "Not available";
}
var taskData = {
    name: taskName,
    desc: taskDesc,
    pid: task.processDefinitionId,
    owner: taskOwner,
    assignee: task.assignee,
    subtask: task.subtaskList
};
var formGenTool = require("/assets/dynamicFormGen.js");
var formData = get(httpUrl + "/bpmn/form/" + id + "/properties", null, headers, "json").data;
var formContent = formGenTool.generateForm(formData.data, false);

%>